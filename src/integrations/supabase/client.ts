// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vqyswydjqhwoiycuzvmm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZxeXN3eWRqcWh3b2l5Y3V6dm1tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc3Mjk5NDYsImV4cCI6MjA3MzMwNTk0Nn0.oUNWR2BlYjmbPj2KOCRQcziy2g56eNh89oJT0FLAbco";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

export type EventRec = {
  id?: string;
  name: string;
  type: 'apparel'|'community'|'holiday'|'business'|'challenge'|'custom';
  category?: string;
  date: string;               // yyyy-mm-dd
  city?: string;
  business_type?: string;
  tags?: string[];
  status?: 'planned'|'in_progress'|'done'|'canceled';
  milestones?: MilestoneRec[];
};

export type MilestoneRec = {
  id?: string;
  event_id?: string;
  name: string;
  offset_days: number;
  absolute_date: string;      // yyyy-mm-dd
  owner?: string;
  status?: 'open'|'done';
  notes?: string;
  sort_order?: number;
};

async function requireAuth() {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    throw new Error('Authentication required');
  }
  return user;
}

export async function upsertPlan(payload: EventRec[]) {
  await requireAuth();
  const { error } = await supabase.rpc('upsert_plan', { p_events: payload });
  if (error) throw error;
}

export async function getEventsInRange(fromISO: string, toISO: string) {
  await requireAuth();
  const { data, error } = await supabase
    .from('events')
    .select('*, milestones(*)')
    .gte('date', fromISO)
    .lte('date', toISO)
    .order('date', { ascending: true });
  if (error) throw error;
  return data;
}

export async function updateMilestoneStatus(id: string, status: 'open'|'done') {
  await requireAuth();
  const { error } = await supabase
    .from('milestones')
    .update({ status, updated_at: new Date().toISOString() })
    .eq('id', id);
  if (error) throw error;
}